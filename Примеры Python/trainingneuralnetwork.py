# -*- coding: utf-8 -*-
"""TrainingNeuralNetwork.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sduEnn3uNcfWgVobYgCkNWPOZ8sobTTl
"""

# импортируем библиотеки

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import bisect as bi
import os

from tensorflow import keras

# Создаем и компилируем модель нейронной сети
#strategy = tf.distribute.MirroredStrategy()
#with strategy.scope():
model = tf.keras.Sequential([
    keras.layers.Dense(10, activation='sigmoid', input_shape=(6,)),

    keras.layers.Dense(10, activation='sigmoid'),

    keras.layers.Dense(10, activation='sigmoid'),
    
    # выходной слой
    keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer=tf.keras.optimizers.Adam(0.01),
              loss='mse',       # mean squared error
              metrics=['mae'])  # mean absolute error
model.summary()

# загружаем данные для обучения
df = pd.read_excel('/content/drive/MyDrive/Диплом/dataSets/3_5_6_15/train.xlsx')

# Перемешать данные
#df = df.sample(frac=1).reset_index(drop=True)

x_train = df[['x1', 'x2', 'x3', 'x4', 'x5', 'x6']].values
y_train = df['y'].values

df = pd.read_excel('/content/drive/MyDrive/Диплом/dataSets/3_5_6_15/valid.xlsx')
x_valid = df[['x1', 'x2', 'x3', 'x4', 'x5', 'x6']].values
y_valid = df['y'].values

#df = pd.read_excel('/content/drive/MyDrive/Диплом/dataSets/DS2-3_5_6_15/test.xlsx')
#x_test = df[['x1', 'x2', 'x3', 'x4', 'x5', 'x6']].values
#y_test = df['y'].values

name_model = '10-10-10:3_5_6_15'
n_train = x_train.shape[0]
BATCH_SIZE = 1000
n_packets = n_train // BATCH_SIZE + (n_train % BATCH_SIZE != 0)
#os.mkdir('/content/drive/MyDrive/Диплом/weights/'+name_model)
model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath='/content/drive/MyDrive/Диплом/weights/'+name_model+'/{epoch}.hdf5',
    save_weights_only=True,
    save_freq=n_packets*100)

# производим обучение
hist = model.fit(x_train, y_train, epochs=5000, batch_size=BATCH_SIZE,
            validation_data=(x_valid, y_valid), callbacks=[model_checkpoint_callback])

# сразу же сохраним
model.save('/content/drive/MyDrive/Диплом/modelsCut/'+name_model)
hist_df = pd.DataFrame(hist.history)
hist_df.to_excel('/content/drive/MyDrive/Диплом/histories/'+name_model+'.xlsx', index=False)

# сохраняем или загружаем модель нейронной сети
model.save('/content/drive/MyDrive/Диплом/models2/'+name_model)
#model = keras.models.load_model('/content/drive/MyDrive/Диплом/models2/'+name_model)
#model.load_weights('/content/drive/MyDrive/Диплом/weights/'+name_model+'/2000.hdf5')
#model.summary()
hist_df = pd.DataFrame(hist.history)
hist_df.to_excel('/content/drive/MyDrive/Диплом/histories/'+name_model+'.xlsx', index=False)