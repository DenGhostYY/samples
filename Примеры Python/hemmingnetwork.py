# -*- coding: utf-8 -*-
"""HemmingNetwork.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11vGkiuee-2ENp3_Cpz2VjEq8_FzcOyeA
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
from PIL import Image
from PIL import ImageDraw

#делает изображение абсолютно черно-белым
def imageToBW(file, fileout, factor = 130):
    image = Image.open(file)
    width = image.size[0] #Определяем ширину. 
    height = image.size[1] #Определяем высоту. 	
    pix = image.load() #Выгружаем значения пикселей.
    draw = ImageDraw.Draw(image) #Создаем инструмент для рисования. 
    for i in range(width):
	    for j in range(height):
		    a = pix[i, j][0]
		    b = pix[i, j][1]
		    c = pix[i, j][2]
		    S = a + b + c
		    if (S > (((255 + factor) // 2) * 3)):
		        a, b, c = 255, 255, 255
		    else:
			    a, b, c = 0, 0, 0
		    draw.point((i, j), (a, b, c))
    image.save(fileout, "PNG")
    del draw
    image.close()

k = 10
for i in range(k):
    #Делаем изображения образцов черно-белыми
    #imageToBW('/content/drive/MyDrive/Образцы/'+str(i)+'.png',
    #          '/content/drive/MyDrive/Образцы/чб/'+str(i)+'.png')
    #Делаем изображения тестов черно-белыми
    file_count = open('/content/drive/MyDrive/Тесты/'+str(i)+'/count.txt', 'r')
    count = int(file_count.readline())
    file_count.close()
    for c in range(1, count + 1):
        imageToBW('/content/drive/MyDrive/Тесты/'+str(i)+'/test'+str(c)+'.png',
              '/content/drive/MyDrive/Тесты/'+str(i)+'/test'+str(c)+'wb.png')

#Делаем изображения тестов НЕцифры черно-белыми
file_count = open('/content/drive/MyDrive/Тесты/НЕцифры/count.txt', 'r')
count = int(file_count.readline())
file_count.close()
for c in range(1, count + 1):
    imageToBW('/content/drive/MyDrive/Тесты/НЕцифры/test'+str(c)+'.png',
        '/content/drive/MyDrive/Тесты/НЕцифры/test'+str(c)+'wb.png')

import numpy as np
from PIL import Image
from PIL import ImageDraw

#Получить вектор-строку по черно-белому изображению
def get_x(file):
    image = Image.open(file)
    width = image.size[0] #Определяем ширину. 
    height = image.size[1] #Определяем высоту.
    x = np.zeros(width * height)	
    pix = image.load() #Выгружаем значения пикселей.
    for j in range(height):
        for i in range(width):
            a = pix[i, j][0]
            if a == 255:
                x[width*j + i] = -1
            else:
                x[width*j + i] = 1
    image.close()
    return x

#скалярная пороговая функция
def f1(s):
    if s <= 0:
        return 0
    return s

#векторная пороговая функция
def f(s):
    m = s.size
    y = np.zeros(m)
    for j in range(m):
        y[j] = f1(s[j])
    return y

#процедура обучения
def training(X, e):
    k, m = X.shape
    W = 0.5 * X
    t = m / 2
    E = -e * np.ones((k, k))
    for i in range(k):
        E[i, i] = 1
    return (W, t, E)

#Прогон входного вектора через сетку
def calc(x, W, t, E, Emax):
    s = np.dot(W, x) + t
    #print("s", s)
    y = f(s)
    y_old = y.copy()
    while True:
        y_new = f(np.dot(E, y_old))
        #print("y_new", y_new)
        #print("y_old", y_old)
        #print("norm", ((y_new - y_old)**2).sum())
        #print()
        if ((y_new - y_old)**2).sum() <= Emax:
            break
        y_old = y_new
    #return y_new
    a = -1
    k = E.shape[0]
    for j in range(k):
        if y_new[j] > 0:
            if a >= 0:
                return -1
            else:
                a = j
    return a

k = 10
m = 55*101
e = 1/(k + 1)
Emax = 0.1

#Формируем матрицу образцов
X = np.zeros((k, m))
for i in range(k):
    X[i,:] = get_x('/content/drive/MyDrive/Образцы/'+str(i)+'.png')

#Обучение сетки
(W, t, E) = training(X, e)

is_success = True
#Тестируем на цифры
for i in range(k):
    file_count = open('/content/drive/MyDrive/Тесты/'+str(i)+'/count.txt', 'r')
    count = int(file_count.readline())
    file_count.close()
    print(f"Тесты для цифры {i}. Количество: {count}")
    for c in range(1, count + 1):
        x = get_x('/content/drive/MyDrive/Тесты/'+str(i)+'/test'+str(c)+'wb.png')
        a = calc(x, W, t, E, Emax)
        if a != i:
            print(f"\tТест {c} не пройден: ожидалось {i}, получено {a}")
            is_success = False

#Тестируем НЕцифры
file_count = open('/content/drive/MyDrive/Тесты/НЕцифры/count.txt', 'r')
count = int(file_count.readline())
file_count.close()
for c in range(1, count + 1):
    x = get_x('/content/drive/MyDrive/Тесты/НЕцифры/test'+str(c)+'wb.png')
    a = calc(x, W, t, E, Emax)
    if a != -1:
        print(f"Тест НЕцифры {c} не пройден: ожидалось {-1}, получено {a}")
        is_success = False
if is_success:
    print("Все тесты пройдены")

"""
def get_x1(file, h, w):
    x = np.zeros(h*w)
    for j in range(h):
        s = file.readline()
        for p in range(w):
            if s[p] == '+':
                x[w*j + p] = 1
            else:
                x[w*j + p] = -1
    file.readline()
    return x
"""

"""
X = np.array([
    [1, -1, 1, -1, 1, -1, 1, -1, 1],
    [-1, 1, -1, 1, 1, 1, -1, 1, -1],
    [1, 1, 1, 1, -1, 1, 1, 1, 1]])
(W, t, E) = training(X)
print(W)
print(t)
print(E)
x4 = np.array([1, -1, -1, -1, 1, -1, 1, -1, 1])
#x5 = np.array([1, 1, 1, -1, -1, -1, 1, 1, 1])
#x = np.array([-1, 1, -1, 1, 1, 1, -1, 1, -1])
a = calc(x4, W, t, E, 0.1)
print(a)
"""

"""
sample_file = open('/content/sample.txt', 'r')
k = int(sample_file.readline())
h,w = map(int, sample_file.readline().split())
X = np.zeros((k, h * w))
for i in range(k):
    X[i,] = get_x1(sample_file, h, w)
sample_file.close()

(W, t, E) = training(X)
print("W", W)
print("t", t)
print("E", E)
test_file = open('/content/test.txt', 'r')
x = get_x1(test_file, h, w)
test_file.close()
a = calc(x, W, t, E, 0.1)
print(a)
"""